{
         "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
         "contentVersion": "1.0.0.0",
     "parameters": {
             "workspace": {
                         "type": "string"
                        }
                     },
        "resources": [
            {
        "type": "Microsoft.OperationalInsights/workspaces/savedSearches",
        "apiVersion": "2020-08-01",
        "name": "[concat(parameters('workspace'), '/SQL-Multiple Password Reset by user')]",
        "location": "[resourceGroup().location]",
        "properties": {
        "eTag": "*",
        "displayName": "Multiple Password Reset by user",
        "category": "Hunting Queries",
        "query": "\nlet PerUserThreshold = 5;
        \nlet TotalThreshold = 100;
        \nlet action = dynamic([\"change\", \"changed\", \"reset\"]);
        \nlet pWord = dynamic([\"password\", \"credentials\"]);
        \nlet PasswordResetMultiDataSource = (union isfuzzy=true
        \nSecurityEvent
        \n| where EventID in (\"4723\",\"4724\")
        \n| project TimeGenerated, Computer, AccountType, Account, Type, TargetUserName),
        \nWindowsEvent
        \n| where EventID in (\"4723\",\"4724\")
        \n| extend SubjectUserSid = tostring(EventData.SubjectUserSid)
        \n| extend TargetUserName = tostring(EventData.TargetUserName)
        \n| extend Account =  strcat(tostring(EventData.SubjectDomainName),\"\\\", tostring(EventData.SubjectUserName))
        \n| extend AccountType=case(Account endswith \"$\" or SubjectUserSid in (\"S-1-5-18\", \"S-1-5-19\", \"S-1-5-20\"), \"Machine\", isempty(SubjectUserSid), \"\", \"User\")
        \n| project TimeGenerated, Computer, AccountType, Account, Type, TargetUserName,
        \nAuditLogs
        \n| where OperationName has_any (pWord) and OperationName has_any (action) and Result =~ \"success\"
        \n| extend AccountType = tostring(TargetResources[0].type), Account = tostring(TargetResources[0].userPrincipalName), TargetUserName = tolower(tostring(TargetResources[0].displayName))
        \n| project TimeGenerated, AccountType, Account, Computer = \"\", Type,
        \nOfficeActivity
        \n| where OfficeWorkload == \"AzureActiveDirectory\" 
		    \n| where (ExtendedProperties has_any (pWord) or ModifiedProperties has_any (pWord)) and (ExtendedProperties has_any (action) or ModifiedProperties 			has_any (action))
	      \n| extend AccountType = UserType, Account = OfficeObjectId 
		    \n| project TimeGenerated, AccountType, Account, Type, Computer = \"\"),
	      \nSyslog
		    \n| where Facility in (\"auth\",\"authpriv\")
		    \n| where SyslogMessage has_any (pWord) and SyslogMessage has_any (action)
		    \n| extend AccountType = iif(SyslogMessage contains \"root\", \"Root\", \"Non-Root\")
		    \n| where SyslogMessage matches regex \".*password changed for.*\"
        \n| parse SyslogMessage with * \"password changed for\" Account
        \n| project TimeGenerated, AccountType, Account, Computer = HostName, Type)
        \n);
        \nlet pwrmd = PasswordResetMultiDataSource
        \n| project TimeGenerated, Computer, AccountType, Account, Type, TargetUserName;
        (union isfuzzy=true  
        (pwrmd
        \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), Computerlist = make_set(Computer, 25), AccountType = make_set(AccountType, 25), Computer = arg_max(Computer , TimeGenerated), TargetUserList = make_set(TargetUserName, 25), TargetUserName = arg_max(TargetUserName, TimeGenerated), Total=count() by Account, Type
        \n| where Total > PerUserThreshold
        \n| extend ResetPivot = \"PerUserReset\"),  
        (pwrmd
        \n| summarize StartTimeUtc = min(TimeGenerated), EndTimeUtc = max(TimeGenerated), ComputerList = make_set(Computer, 25), AccountList = make_set(Account, 25), AccountType = make_set(AccountType, 25), Computer = arg_max(Computer , TimeGenerated), TargetUserList = make_set(TargetUserName, 25), TargetUserName = arg_max(TargetUserName, TimeGenerated), Total=count() by Type
        \n| where Total > TotalThreshold
        \n| extend ResetPivot = \"TotalUserReset\")
        \n)
        \n| extend timestamp = StartTimeUtc, AccountCustomEntity = Account, HostCustomEntity = Computer
        \n",
            "version": 1,
            "tags": [
                 {
                "name": "description",
                "value": "This query will determine multiple password resets by user across multiple data sources.\nThis query is based on the SQLEvent KQL Parser function (link below)\nSQLEvent KQL Parser provided at https://github.com/Azure/Azure-Sentinel/tree/master/Par"
                 },
                 {
                "name": "tactics",
                "value": "Initial Access"
                 },
                {
                "name": "relevantTechniques",
                 "value": "T1078"
                }
             ]
          }
        }
      ]
    }
